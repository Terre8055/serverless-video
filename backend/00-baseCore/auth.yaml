AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: ServerleVideo auth stack

Parameters:
  AuthDomain:
    Type: String
    Description: Name for the hosted auth domain


Resources:

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: SF-UserPool
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      LambdaConfig:
        PreSignUp: !GetAtt PreSignUpFunction.Arn
        # PreTokenGeneration: !GetAtt PreTokenGenerationFunction.Arn
        PostConfirmation: !GetAtt PostConfirmationFunction.Arn

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlowsUserPoolClient: True
      ClientName: SF-UserPoolClient
      GenerateSecret: False
      UserPoolId: !Ref UserPool
      SupportedIdentityProviders:
        - COGNITO
        - Google
        - LoginWithAmazon
        # - Facebook
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
        - profile
        - aws.cognito.signin.user.admin
      CallbackURLs:
        - http://localhost:3000/
        - https://video.serverlessland.com
        - https://video-beta.serverlessland.com
      LogoutURLs:
        - http://localhost:3000/
        - https://video.serverlessland.com
        - https://video-beta.serverlessland.com
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH

  BroadcastersUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties: 
      Description: Broadcasters user group
      GroupName: broadcasters
      Precedence: 0
      RoleArn: !GetAtt BroadcastersRole.Arn
      UserPoolId: !Ref UserPool

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: SF-IdentityPool
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: !Ref AuthDomain
      UserPoolId: !Ref UserPool

  AmazonIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref UserPool
      ProviderName: "LoginWithAmazon"
      ProviderDetails:
        client_id: '{{resolve:secretsmanager:serverlessVideo:SecretString:amazon-identity-id}}'
        client_secret: '{{resolve:secretsmanager:serverlessVideo:SecretString:amazon-identity-secret}}'
        authorize_scopes: "profile profile:user_id"
      ProviderType: "LoginWithAmazon"
      AttributeMapping:
        email: email
        username: user_id
  
  GoogleIdentityProvider:
    Type: AWS::Cognito::UserPoolIdentityProvider
    Properties:
      UserPoolId: !Ref UserPool
      ProviderName: "Google"
      ProviderDetails:
        client_id: '{{resolve:secretsmanager:serverlessVideo:SecretString:google-identity-id}}'
        client_secret: '{{resolve:secretsmanager:serverlessVideo:SecretString:google-identity-secret}}'
        authorize_scopes: "openid email profile"
      ProviderType: "Google"
      AttributeMapping:
        email: email
        username: sub

  # FacebookIdentityProvider:
  #   Type: AWS::Cognito::UserPoolIdentityProvider
  #   Properties:
  #     UserPoolId: !Ref UserPool
  #     ProviderName: "Facebook"
  #     ProviderDetails:
  #       client_id: '{{resolve:secretsmanager:serverlessVideo:SecretString:facebook-identity-id}}'
  #       client_secret: '{{resolve:secretsmanager:serverlessVideo:SecretString:facebook-identity-secret}}'
  #       authorize_scopes: "public_profile,email"
  #     ProviderType: "Facebook"
  #     AttributeMapping:
  #       email: "email"

  UnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cognito-sync:*"
                Resource: !Join [ "", [ "arn:aws:cognito-sync:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":identitypool/", !Ref IdentityPool] ]
              - Effect: Allow
                Action:
                  - iot:Connect
                Resource: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":client/serverlessVideo-*" ] ]
              - Effect: Allow
                Action:
                  - iot:Subscribe
                Resource: "*"
              - Effect: Allow
                Action:
                  - iot:Receive
                Resource: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":topic/*" ] ]

# Create a role for authorized acces to AWS resources.
  AuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cognito-sync:*"
                Resource: !Join [ "", [ "arn:aws:cognito-sync:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":identitypool/", !Ref IdentityPool] ]
              - Effect: Allow
                Action:
                  - iot:Connect
                Resource: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":client/serverlessVideo-*" ] ]
              - Effect: Allow
                Action:
                  - iot:Subscribe
                Resource: "*"
              - Effect: Allow
                Action:
                  - iot:Receive
                Resource: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":topic/*" ] ]
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSIoTDataAccess
        - arn:aws:iam::aws:policy/AWSIoTConfigAccess

  # Role for all broadcaster group members
  BroadcastersRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Action:
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
         - PolicyName: "BroadcastCognitoAuthorizedPolicy"
           PolicyDocument:
             Version: "2012-10-17"
             Statement:
               - Effect: "Allow"
                 Action:
                   - "cognito-sync:*"
                 Resource: !Join [ "", [ "arn:aws:cognito-sync:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":identitypool/", !Ref IdentityPool] ]
               - Effect: Allow
                 Action:
                   - iot:Connect
                 Resource: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":client/serverlessVideo-*" ] ]
               - Effect: Allow
                 Action:
                   - iot:Subscribe
                 Resource: "*"
               - Effect: Allow
                 Action:
                   - iot:Receive
                 Resource: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":topic/*" ] ]
      ManagedPolicyArns:
         - arn:aws:iam::aws:policy/AWSIoTDataAccess
        # - arn:aws:iam::aws:policy/AWSIoTConfigAccess
        # - arn:aws:iam::aws:policy/AdministratorAccess

  IdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt AuthorizedRole.Arn
        unauthenticated: !GetAtt UnAuthorizedRole.Arn
      RoleMappings:
        UserPoolProvider:
          IdentityProvider: !Join [":", [!GetAtt UserPool.ProviderName, !Ref UserPoolClient]]
          AmbiguousRoleResolution: AuthenticatedRole
          Type: Token

##########################################
# Custom auth flow Lambda functions      #
##########################################
  PreSignUpFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./cognito-triggers/
      Handler: pre-sign-up.handler
      Runtime: nodejs16.x

  # PreTokenGenerationFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     CodeUri: ./cognito-triggers/
  #     Handler: pre-token.handler
  #     Runtime: nodejs16.x

  
  PostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./cognito-triggers/
      Handler: post-confirmation.handler
      Runtime: nodejs16.x
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: "default"
        - Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - cognito-idp:AdminAddUserToGroup
            Resource: !Sub arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${AWS::Region}* # TODO: ake less permissive but avoid circular reference

  PreSignUpInvocationPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignUpFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  # PreTokenGenerationFunctionPermission:
  #    Type: AWS::Lambda::Permission
  #    Properties:
  #      Action: lambda:InvokeFunction
  #      FunctionName: !GetAtt PreTokenGenerationFunction.Arn
  #      Principal: cognito-idp.amazonaws.com
  #      SourceArn: !GetAtt UserPool.Arn
  
  PostConfirmationPermission:
     Type: AWS::Lambda::Permission
     Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PostConfirmationFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

Outputs:
  IdentityPoolId:
    Description: Identity pool id
    Value: !Ref IdentityPool

  UserPoolId:
    Description: User pool id
    Value: !Ref UserPool

  UserPoolArn:
    Description: User pool arn
    Value: !GetAtt UserPool.Arn

  UserPoolClientId:
    Description: User pool client id
    Value: !Ref UserPoolClient

  AuthDomain:
    Description: Hosted ui for auth
    Value: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com