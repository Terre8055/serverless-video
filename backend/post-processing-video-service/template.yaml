## incomplete, the actual service running in production in not templatized yet as it's likely to be switched out for a lambda and ffmpeg ersion

##  Service linked role is and account-wide role that is assumed by ECS to take actions on your behalf and is distinct from the ecsTaskExecutionRole
##  This role needs to be created by the user. 

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: ffmpeg media convert

Parameters:
  DestinationBucket:
    Type: String
    Description: Bucket where all media is stored
  SourceBucket:
    Type: String
    Description: Bucket where all media is stored
  serverlessVideoVideosTable:
    Type: String
    Default: serverlessVideo-Video-table
  serverlessVideoChannelsTable:
    Type: String
    Default: serverlessVideo-channels-table
  cdnUrl:
    Type: String
    Default: dmpdx8pmqxo3f.cloudfront.net
  ImageTag:
    Type: String
    Default: latest


Resources:

  ##########################
  #### Eric's additions ####
  ##########################


  # VPC for the cluster
  VPC:
    Type: AWS::Serverless::Application
    Properties:
      Location: ./vpc.yaml

  ECRRepo:
    Type: AWS::ECR::Repository

  Cluster:
    Type: AWS::ECS::Cluster
    Properties: 
      CapacityProviders: 
        - FARGATE

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: StepTask
      Cpu: 4096
      Memory: 30720
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      TaskRoleArn: !Ref ECSTaskRole
      RuntimePlatform:
        CpuArchitecture: ARM64
      ContainerDefinitions:
        - Name: StepTask1
          Cpu: 4096
          Memory: 30720
          Image: !Sub
            - ${RepoUrl}:${ImageTag}
            - RepoUrl: !GetAtt ECRRepo.RepositoryUri
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: containerlog
          Environment:
            -   Name: SourceBucket
                Value: !Ref SourceBucket 
            -   Name: DestinationBucket
                Value: !Ref DestinationBucket 
            -   Name: cdnUrl
                Value: !Ref cdnUrl 
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /steptask

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess


  ##########################
  ## End Eric's additions ##
  ##########################


  # This function creates a conversion of the TS file to an MP4 file
  StartConversion:  
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: post-processing-wFFmpeg-service-StartConversion
      CodeUri: functions/convert
      Handler: app.handler
      MemorySize: 10240
      EphemeralStorage: 
         Size: 3072
      Timeout: 900
      Runtime: nodejs16.x
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:ffmpeg:1'
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref SourceBucket
        - S3WritePolicy:
            BucketName: !Ref DestinationBucket
      Environment:
        Variables:
          SourceBucket: !Ref SourceBucket
          DestinationBucket: !Ref DestinationBucket
          cdnUrl: !Ref cdnUrl

  convertChunk:  
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/parsePlaylistFile
      Handler: app.handler
      MemorySize: 10240
      EphemeralStorage: 
         Size: 3072
      Timeout: 900
      Runtime: nodejs16.x
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:ffmpeg:1'
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref SourceBucket
        - S3WritePolicy:
            BucketName: !Ref DestinationBucket
      Environment:
        Variables:
          SourceBucket: !Ref SourceBucket
          DestinationBucket: !Ref DestinationBucket
  
  mergeChunks:  
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/AddToMP4File
      Handler: app.handler
      MemorySize: 10240
      EphemeralStorage: 
         Size: 3072
      Timeout: 900
      Runtime: nodejs16.x
      Layers:
        - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:ffmpeg:1'
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref DestinationBucket
      Environment:
        Variables:
          SourceBucket: !Ref SourceBucket
          DestinationBucket: !Ref DestinationBucket

  
  
  SimulatorWF:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/simulatorWorkflow.asl.json
      DefinitionSubstitutions:
        postProcessingWf: !Ref PostProcessingStreamToMp4WLambda
      Name:
        !Join [
          '',
          [
            !Ref 'AWS::AccountId',
            '-',
            !Ref 'AWS::Region',
            '-SimulatorWF',
          ],
        ]
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - states:ListActivities
                - states:ListExecutions
                - states:GetExecutionHistory
              Resource:
                - "*"
        - EventBridgePutEventsPolicy:
            EventBusName: "default"
        - StepFunctionsExecutionPolicy:
            StateMachineName:  
              !Join [
                '',
                [
                  !Ref 'AWS::AccountId',
                  '-',
                  !Ref 'AWS::Region',
                  '-SimulatorWF',
                ],
              ]
  
  PostProcessingWFCopyStreamFilesToSFBucket:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      DefinitionUri: statemachine/CopyTSworkflow.asl.json
      DefinitionSubstitutions:
        SourceBucket: !Ref SourceBucket
        DestinationBucket: !Ref DestinationBucket
      Events:
        EBRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - "aws.ivs"
              detail:
                recording_status:
                    - "Recording End"
        simulation:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - "simulator"
              detail:
                recording_status:
                    - "Recording End"
      Name:
        !Join [
          '',
          [
            !Ref 'AWS::AccountId',
            '-',
            !Ref 'AWS::Region',
            '-PostProcessingWFCopyStreamFilesToSFBucket',
          ],
        ]
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref SourceBucket
        - S3CrudPolicy:
            BucketName: !Ref DestinationBucket
        - StepFunctionsExecutionPolicy:
            StateMachineName:  
              !Join [
                '',
                [
                  !Ref 'AWS::AccountId',
                  '-',
                  !Ref 'AWS::Region',
                  '-PostProcessingWFCopyStreamFilesToSFBucket',
                ],
              ]

  
  
  PostProcessingStreamToMp4WLambda:
    Type: AWS::Serverless::StateMachine # More info about State Machine Resource: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
    Properties:
      Events:
        EBRule:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - "aws.ivs"
              detail:
                recording_status:
                    - "Recording End"
        simulation:
          Type: EventBridgeRule
          Properties:
            Pattern:
              source:
                - "simulator"
              detail:
                recording_status:
                    - "Recording End"
      Name:
        !Join [
          '',
          [
            !Ref 'AWS::AccountId',
            '-',
            !Ref 'AWS::Region',
            '-PostProcessingStreamToMp4WLambda',
          ],
        ]
      DefinitionUri: statemachine/workflow.asl.json
      DefinitionSubstitutions:
        DDBTableChannel: !Ref serverlessVideoChannelsTable
        DDBTableVideos: !Ref serverlessVideoVideosTable
        FunctionName: !Ref StartConversion
        MergeFunctionName: !Ref mergeChunks
        Cluster: !GetAtt Cluster.Arn
        TaskDefinition: !Ref TaskDefinition
        Subnet1: !GetAtt VPC.Outputs.Subnet1
        Subnet2: !GetAtt VPC.Outputs.Subnet2
        SecurityGroup: !GetAtt VPC.Outputs.SG
        SourceBucket: !Ref SourceBucket
        DestinationBucket: !Ref DestinationBucket

      Policies: # Find out more about SAM policy templates: https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-policy-templates.html
        - LambdaInvokePolicy:
            FunctionName: !Ref StartConversion
        - LambdaInvokePolicy:
            FunctionName: !Ref convertChunk
        - LambdaInvokePolicy:
            FunctionName: !Ref mergeChunks
        - DynamoDBWritePolicy:
            TableName: !Ref serverlessVideoVideosTable
        - DynamoDBReadPolicy:
            TableName: !Ref serverlessVideoChannelsTable
        - EventBridgePutEventsPolicy:
            EventBusName: "default"
        - S3CrudPolicy:
            BucketName: !Ref SourceBucket
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ecs:RunTask
              Resource: !Ref TaskDefinition
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - !GetAtt ECSTaskExecutionRole.Arn
                - !GetAtt ECSTaskRole.Arn
        - StepFunctionsExecutionPolicy:
            StateMachineName:  
              !Join [
                '',
                [
                  !Ref 'AWS::AccountId',
                  '-',
                  !Ref 'AWS::Region',
                  '-PostProcessingStreamToMp4WLambda',
                ],
              ]

Outputs:
  ClusterName:
    Description: Amazon ECS Cluster Name
    Value: !Ref Cluster
  RepositoryUrl:
    Description: URL of the repo
    Value: !GetAtt ECRRepo.RepositoryUri
