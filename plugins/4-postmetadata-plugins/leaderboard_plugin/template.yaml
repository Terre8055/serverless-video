---
AWSTemplateFormatVersion: "2010-09-09"

Transform: AWS::Serverless-2016-10-31

Description: >
  serverlessVideo-plugin-LeaderboardPlugin

  Builds a leaderboard plugin and associated APIs.

Parameters:
  PluginName:
    Description: Identifier for this plugin
    Type: String
    Default: leaderboardPlugin

  ServiceName:
    Description: The name of the service being created.
    Type: String
    Default: leaderboard-service

  CacheUserName:
    Description: Name of the cache service user
    Type: String
    Default: leaderboard-user

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    Private0:
      CIDR: "10.0.0.0/24"
    Private1:
      CIDR: "10.0.1.0/24"

  # This mapping accounts for the scenario when certain AZs
  # are not available to use (this differs on a per account
  # per customer basis).
  AZRegions:
    ap-northeast-1:
      AZs: ["a", "b"]
    ap-northeast-2:
      AZs: ["a", "b"]
    ap-south-1:
      AZs: ["a", "b"]
    ap-southeast-1:
      AZs: ["a", "b"]
    ap-southeast-2:
      AZs: ["a", "b"]
    ca-central-1:
      AZs: ["a", "b"]
    eu-central-1:
      AZs: ["a", "b"]
    eu-west-1:
      AZs: ["a", "b"]
    eu-west-2:
      AZs: ["a", "b"]
    sa-east-1:
      AZs: ["a", "b"]
    us-east-1:
      AZs: ["a", "b"]
    us-east-2:
      AZs: ["a", "b"]
    us-west-1:
      AZs: ["a", "b"]
    us-west-2:
      AZs: ["a", "b"]

Globals:
  Function:
    Architectures:
      - arm64
    MemorySize: 256
    Runtime: nodejs18.x
    Timeout: 10
    Tracing: Active
    VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet0
          - !Ref PrivateSubnet1
        SecurityGroupIds:
          - !Ref ServiceSecurityGroup
    Environment:
      Variables:
        PLUGIN_NAME: !Ref PluginName
        POWERTOOLS_SERVICE_NAME: serverlessVideo-leaderboard
        POWERTOOLS_METRICS_NAMESPACE: serverlessVideo-leaderboard
        LOG_LEVEL: DEBUG

Resources:
  # Tie into serverlessVideo plug-in ecosystem via EventBridge rule
  PluginHookFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: post-metadata-hook.handler
      Policies:
        - EventBridgePutEventsPolicy:
            EventBusName: default
        # Explicitly allow the function to invoke the VPC Lattice-exposed service
        - Statement:
            Effect: Allow
            Action: "vpc-lattice-svcs:Invoke"
            Resource: !Sub "${LeaderboardService.Arn}/*"
      Environment:
        Variables:
          LEADERBOARD_SERVICE_ENDPOINT: !Sub "https://${LeaderboardService.DnsEntry.DomainName}/leaderboard"
      Events:
        pluginTrigger:
          Type: EventBridgeRule
          Properties:
            EventBusName: default # a rule for the default event bus
            Pattern:
              source:
                - serverlessVideo.pluginManager
              detail-type:
                - postMetadata.leaderboardPlugin # this will be trigerred on the post metadata hook event
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Bundle: true
        EntryPoints:
          - functions/post-metadata-hook.ts
        Minify: true
        Target: "ES2020"
        Sourcemap: true
            
  ## Networking ##
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap [ SubnetConfig, VPC, CIDR ]
      Tags:
        - Key: "Network"
          Value: "Private"
        - Key: "Name"
          Value: !Sub "${ServiceName}-VPC"

  PrivateSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub
        - "${AWS::Region}${AZ}"
        - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock: !FindInMap [ SubnetConfig, Private0, CIDR ]
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Sub
            - "${ServiceName}-VPC-private-${AZ}"
            - AZ: !Select [ 0, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Sub
        - "${AWS::Region}${AZ}"
        - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]
      CidrBlock: !FindInMap [ SubnetConfig, Private1, CIDR ]
      Tags:
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Sub
            - "${ServiceName}-VPC-private-${AZ}"
            - AZ: !Select [ 1, !FindInMap [ "AZRegions", !Ref "AWS::Region", "AZs" ] ]

  PrivateRouteTable0:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${ServiceName}-VPC-private-route-table"

  PrivateSubnetRouteTableAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet0
      RouteTableId: !Ref PrivateRouteTable0

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable0

  # Update the default VPC security group to allow access from service SG
  # Allows communication from Lambda funcionts to VPC endpoints
  VpcDefaultSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt VPC.DefaultSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt ServiceSecurityGroup.GroupId
      ToPort: 65535
      FromPort: 0

  EventBridgeInterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.events"
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1

  CloudWatchLogsInterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.logs"
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1

  XRayInterfaceEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.xray"
      PrivateDnsEnabled: true
      VpcEndpointType: Interface
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1
  
  ## VPC Lattice ##
  ServiceNetwork:
    Type: AWS::VpcLattice::ServiceNetwork
    Properties:
      AuthType: AWS_IAM
      Name: !Sub "${ServiceName}-service-network"
  
  ServiceNetworkVpcAssociation:
    Type: AWS::VpcLattice::ServiceNetworkVpcAssociation
    Properties:
      ServiceNetworkIdentifier: !Ref ServiceNetwork
      VpcIdentifier: !Ref VPC

  LeaderboardService:
    Type: AWS::VpcLattice::Service
    Properties:
      AuthType: AWS_IAM
      Name: !Sub "${ServiceName}"

  LeaderboardServiceNetworkAssociation:
    Type: AWS::VpcLattice::ServiceNetworkServiceAssociation
    Properties:
      ServiceIdentifier: !Ref LeaderboardService
      ServiceNetworkIdentifier: !Ref ServiceNetwork

  ServiceNetworkAuthPolicy:
    Type: AWS::VpcLattice::AuthPolicy
    Properties:
      ResourceIdentifier: !GetAtt ServiceNetwork.Arn
      Policy:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: "vpc-lattice-svcs:Invoke"
            Resource: "*"
            Condition:
              StringEquals:
                vpc-lattice-svcs:SourceVpc: !Ref VPC

  LeaderboardServiceAuthPolicy:
    Type: AWS::VpcLattice::AuthPolicy
    Properties:
      ResourceIdentifier: !GetAtt LeaderboardService.Arn
      Policy:
        Statement:
          - Effect: Allow
            Principal:
              AWS: "*"
            Action: "vpc-lattice-svcs:Invoke"
            Resource: "*"
            Condition:
              StringNotEquals:
                aws:PrincipalType: "Anonymous"
              StringEquals:
                vpc-lattice-svcs:ServiceNetworkArn: !Sub "${ServiceNetwork.Arn}"

  LeaderboardServiceListener:
    Type: AWS::VpcLattice::Listener
    Properties:
      Port: 443
      Protocol: HTTPS
      ServiceIdentifier: !Ref LeaderboardService
      DefaultAction:
        FixedResponse:
          StatusCode: 404

  ReadFromLeaderboardTargetGroup:
    Type: AWS::VpcLattice::TargetGroup
    Properties:
      Type: LAMBDA
      Targets:
        - Id: !GetAtt ReadFromLeaderboardFunction.Arn
      Config:
        LambdaEventStructureVersion: V2

  UpdateLeaderboardTargetGroup:
    Type: AWS::VpcLattice::TargetGroup
    Properties:
      Type: LAMBDA
      Targets:
        - Id: !GetAtt UpdateLeaderboardFunction.Arn
      Config:
        LambdaEventStructureVersion: V2

  ReadLeaderboardRule:
    Type: AWS::VpcLattice::Rule
    Properties:
      Action:
        Forward:
          TargetGroups:
            - TargetGroupIdentifier: !Ref ReadFromLeaderboardTargetGroup
              Weight: 100
      ListenerIdentifier: !Ref LeaderboardServiceListener
      Match:
        HttpMatch:
          Method: GET
          PathMatch:
            CaseSensitive: true
            Match:
              Prefix: /leaderboard
      Priority: 10
      ServiceIdentifier: !Ref LeaderboardService

  UpdateLeaderboardRule:
    Type: AWS::VpcLattice::Rule
    Properties:
      Action:
        Forward:
          TargetGroups:
            - TargetGroupIdentifier: !Ref UpdateLeaderboardTargetGroup
              Weight: 100
      ListenerIdentifier: !Ref LeaderboardServiceListener
      Match:
        HttpMatch:
          Method: PUT
          PathMatch:
            CaseSensitive: true
            Match:
              Prefix: /leaderboard
      Priority: 20
      ServiceIdentifier: !Ref LeaderboardService

  ReadFromLeaderboardFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: read-leaderboard.handler
      Policies:
        # Grant permission to MemoryDB cluster and user
        - Statement:
            Effect: Allow
            Action: "memorydb:connect"
            Resource:
              - !GetAtt CacheCluster.ARN
              - !GetAtt CacheUser.Arn
      Environment:
        Variables:
          CACHE_ENDPOINT: !GetAtt CacheCluster.ClusterEndpoint.Address
          CACHE_CLUSTER_NAME: !Sub "${ServiceName}-memorydb-cluster"
          CACHE_PORT: 6379
          CACHE_USER: !Ref CacheUserName
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        Minify: true
        OutExtension:
          - .js=.mjs
        Target: "es2022"
        Sourcemap: true
        EntryPoints:
          - functions/read-leaderboard.ts
        # @see https://github.com/aws/aws-sam-cli/issues/4827
        Banner:
          - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);

  UpdateLeaderboardFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: update-leaderboard.handler
      Policies:
        # Grant permission to MemoryDB cluster and user
        - Statement:
            Effect: Allow
            Action: "memorydb:connect"
            Resource:
              - !GetAtt CacheCluster.ARN
              - !GetAtt CacheUser.Arn
      Environment:
        Variables:
          CACHE_ENDPOINT: !GetAtt CacheCluster.ClusterEndpoint.Address
          CACHE_CLUSTER_NAME: !Sub "${ServiceName}-memorydb-cluster"
          CACHE_PORT: 6379
          CACHE_USER: !Ref CacheUserName
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        Minify: true
        OutExtension:
          - .js=.mjs
        Target: "es2022"
        Sourcemap: true
        EntryPoints:
          - functions/update-leaderboard.ts
        # @see https://github.com/aws/aws-sam-cli/issues/4827
        Banner:
          - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);

  ## MemoryDB ##
  CacheSubnetGroup:
    Type: AWS::MemoryDB::SubnetGroup
    Properties:
      SubnetGroupName: !Sub "${ServiceName}-cache-subnet-group"
      SubnetIds:
        - !Ref PrivateSubnet0
        - !Ref PrivateSubnet1
  
  CacheSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MemoryDB cluster access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          SourceSecurityGroupId: !GetAtt ServiceSecurityGroup.GroupId
          ToPort: 6379
          FromPort: 6379

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Service / app access to MemoryDB cluster
      VpcId: !Ref VPC
  
  CacheCluster:
    DependsOn: CacheACL
    Type: AWS::MemoryDB::Cluster
    Properties:
      ClusterName: !Sub "${ServiceName}-memorydb-cluster"
      Description: !Sub "${ServiceName} cache cluster"
      ACLName: !Sub "${ServiceName}-${CacheUserName}"
      EngineVersion: 7.0
      NodeType: db.t4g.small
      SecurityGroupIds:
        - !Ref CacheSecurityGroup
      SubnetGroupName: !Ref CacheSubnetGroup
      TLSEnabled: true
  
  CacheACL:
    DependsOn: CacheUser
    Type: AWS::MemoryDB::ACL
    Properties:
      ACLName: !Sub "${ServiceName}-${CacheUserName}"
      UserNames:
        - !Ref CacheUserName

  CacheUser:
    Type: AWS::MemoryDB::User
    Properties:
      AccessString: "on ~* +@all"
      AuthenticationMode:
        Type: iam
      UserName: !Ref CacheUserName

  ## AppSync ##
  LeaderboarGraphqlApi:
    Type: AWS::Serverless::GraphQLApi
    Properties:
      SchemaUri: graphql/schema.graphql
      Auth:
        Type: API_KEY
      ApiKeys:
        WebApiKey: {}
      DataSources:
        Lambda:
          ListLeadersDataSource:
            FunctionArn: !GetAtt ListLeadersFunction.Arn
      Functions:
        listLeaders:
          Runtime:
            Name: APPSYNC_JS
            Version: "1.0.0"
          DataSource: ListLeadersDataSource
          CodeUri: graphql/query.listLeaders.js
      Resolvers:
        Query:
          listLeaders:
            Runtime:
              Name: APPSYNC_JS
              Version: "1.0.0"
            Pipeline:
              - listLeaders
      XrayEnabled: true
            
  ListLeadersFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: list-leaders.handler
      Policies:
        - Statement:
            Effect: Allow
            Action: "vpc-lattice-svcs:Invoke"
            Resource: !Sub "${LeaderboardService.Arn}/*"
      Environment:
        Variables:
          LEADERBOARD_SERVICE_ENDPOINT: !Sub "https://${LeaderboardService.DnsEntry.DomainName}/leaderboard"
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Bundle: true
        EntryPoints:
          - functions/list-leaders.ts
        Minify: true
        Target: "ES2020"
        Sourcemap: true

Outputs:
  LeaderboardServiceEndpoint:
    Description: Leaderboard service endpoint
    Value: !GetAtt LeaderboardService.DnsEntry.DomainName
  
  LeaderboardGraphqlEndpoint:
    Description: Leaderboard GraphQL endpoint
    Value: !GetAtt LeaderboarGraphqlApi.GraphQLUrl

  LeaderboardGraphqlApiKey:
    Description: Leaderboard GraphQL API Key
    Value: !GetAtt LeaderboarGraphqlApiWebApiKey.ApiKey
